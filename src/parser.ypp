// vim: set filetype=yacc :

%{
#include "ast/ast.hpp"
using namespace kompis;

extern "C"
{
  void yyerror(const char *);
  int yywrap();
}

int yylex();

extern int line_num;

// These are used to subvert Bison's type system, or lack thereof.
ast::ExpressionList *expressions;
ast::ParameterDeclarationList *parameter_declarations;
ast::ProgramDeclaration *program_declaration;
ast::StatementList *statements;
%}

%token BOOLEAN CLASS ELSE FALSE IDENTIFIER IF INT INT_LITERAL MAIN NEW PRINT PUBLIC RETURN STATIC STRING THIS TRUE VOID WHILE LENGTH
%left ','
%right '='
%left AND
%left '<'
%left '+' '-'
%left '*'
%right '!'
%left '.'
%left '['

// The list types in the union could be replaced by global variables.
%union
{
  int value;
  char *text;
  ast::Node *node;
  ast::ClassDeclarationList *class_declarations;
  ast::ExpressionList *expressions;
  ast::MethodDeclarationList *method_declarations;
  ast::ParameterDeclarationList *parameter_declarations;
  ast::StatementList *statements;
  ast::VariableDeclarationList *variable_declarations;
}

%type <value> INT_LITERAL
%type <text> IDENTIFIER
%type <node> program main_class class_declaration variable_declaration method_declaration parameter_rest type statement expression_rest expression
%type <class_declarations> class_declarations
%type <expressions> expression_list expression_rests
%type <method_declarations> method_declarations
%type <parameter_declarations> parameter_list parameter_rests
%type <statements> statements
%type <variable_declarations> variable_declarations

%%

program
  : main_class class_declarations
    { program_declaration = new ast::ProgramDeclaration(static_cast<ast::MainClassDeclaration *>($1), $2, line_num); }
  ;

main_class
  : CLASS IDENTIFIER '{' PUBLIC STATIC VOID MAIN '(' STRING '[' ']' IDENTIFIER ')' '{' statement '}' '}'
    { $$ = new ast::MainClassDeclaration(static_cast<ast::Statement *>($15), line_num); }
  ;

// Of the following two cases, the empty case will be executed first (and only
// once) ensuring that a new list will be allocated before any actual
// declarations are executed. (The same pattern is reused for all simple list
// types.)
class_declarations
  :
    { $$ = new ast::ClassDeclarationList(); }
  | class_declarations class_declaration
    { $$->_list.push_back(static_cast<ast::ClassDeclaration *>($2)); }
  ;

class_declaration
  : CLASS IDENTIFIER '{' variable_declarations method_declarations '}'
    { $$ = new ast::ClassDeclaration(new ast::Identifier($2, line_num), $4, $5, line_num); }
  ;

// See class_declarations for explanation.
variable_declarations
  :
    { $$ = new ast::VariableDeclarationList(); }
  | variable_declarations variable_declaration
    { $$->_list.push_back(static_cast<ast::VariableDeclaration *>($2)); }
  ;

variable_declaration
  : type IDENTIFIER ';'
    { $$ = new ast::VariableDeclaration(static_cast<ast::Type *>($1), new ast::Identifier($2, line_num), line_num); }
  ;

// See class_declarations for explanation.
method_declarations
  :
    { $$ = new ast::MethodDeclarationList(); }
  | method_declarations method_declaration
    { $$->_list.push_back(static_cast<ast::MethodDeclaration *>($2)); }
  ;

method_declaration
  : PUBLIC type IDENTIFIER '(' parameter_list ')' '{' variable_declarations statements RETURN expression ';' '}'
    { $$ = new ast::MethodDeclaration(static_cast<ast::Type *>($2), new ast::Identifier($3, line_num), $5, $8, $9, static_cast<ast::Expression *>($11), line_num); }
  ;

// This is a slightly more complicated type of list.
parameter_list
  :
    // This clause ONLY gets executed for an empty parameter list.
    { $$ = parameter_declarations = new ast::ParameterDeclarationList(); }
  | type IDENTIFIER parameter_rests
    // This clause gets executed once, last, for a non-empty parameter list.
    {
      parameter_declarations->_list.push_front(new ast::ParameterDeclaration(static_cast<ast::Type *>($1), new ast::Identifier($2, line_num), line_num));
      $$ = parameter_declarations;
    }
  ;

parameter_rests
  :
    // This clause gets executed once, first, for a non-empty parameter list.
    { parameter_declarations = new ast::ParameterDeclarationList(); }
  | parameter_rests parameter_rest
    // This clause gets executed once for each element of a non-empty parameter list, after the parameter_rest clause.
    { parameter_declarations->_list.push_back(static_cast<ast::ParameterDeclaration *>($2)); }
  ;

parameter_rest
  : ',' type IDENTIFIER
    // This clause gets executed once for each element of a non-empty parameter list, before the second parameter_rests clause.
    { $$ = new ast::ParameterDeclaration(static_cast<ast::Type *>($2), new ast::Identifier($3, line_num), line_num); }
  ;

type
  : INT '[' ']'
    { $$ = new ast::IntArrayType(line_num); }
  | BOOLEAN
    { $$ = new ast::BooleanType(line_num); }
  | INT
    { $$ = new ast::IntType(line_num); }
  | IDENTIFIER
    { $$ = new ast::IdentifierType($1, line_num); }
  ;

// See class_declarations for explanation.
statements
  :
    { $$ = statements = new ast::StatementList(line_num); }
  | statement statements // right recursive, to fix a shift/reduce conflict in method bodies
    {
      statements->_list.push_front(static_cast<ast::Statement *>($1));
      $$ = statements;
    }
  ;

statement
  : '{' statements '}'
    { $$ = $2 }
  | IF '(' expression ')' statement ELSE statement
    { $$ = new ast::IfElseStatement(static_cast<ast::Expression *>($3), static_cast<ast::Statement *>($5), static_cast<ast::Statement *>($7), line_num); }
  | WHILE '(' expression ')' statement
    { $$ = new ast::WhileStatement(static_cast<ast::Expression *>($3), static_cast<ast::Statement *>($5), line_num); }
  | PRINT '(' expression ')' ';'
    { $$ = new ast::PrintStatement(static_cast<ast::Expression *>($3), line_num); }
  | IDENTIFIER '=' expression ';'
    { $$ = new ast::AssignmentStatement(new ast::Identifier($1, line_num), static_cast<ast::Expression *>($3), line_num); }
  | IDENTIFIER '[' expression ']' '=' expression ';'
    { $$ = new ast::IntArrayAssignmentStatement(new ast::Identifier($1, line_num), static_cast<ast::Expression *>($3), static_cast<ast::Expression *>($6), line_num); }
  ;

// See parameter_list for explanation.
expression_list
  :
    { $$ = expressions = new ast::ExpressionList(); }
  | expression expression_rests
    {
      expressions->_list.push_front(static_cast<ast::Expression *>($1));
      $$ = expressions;
    }
  ;

expression_rests
  :
    { expressions = new ast::ExpressionList(); }
  | expression_rests expression_rest
    { expressions->_list.push_back(static_cast<ast::Expression *>($2)); }
  ;

expression_rest
  : ',' expression
    { $$ = $2; }
  ;

expression
  : expression '+' expression
    { $$ = new ast::BinaryIntExpression(ast::BinaryIntExpression::ADD, static_cast<ast::Expression *>($1), static_cast<ast::Expression *>($3), line_num); }
  | expression '-' expression
    { $$ = new ast::BinaryIntExpression(ast::BinaryIntExpression::SUB, static_cast<ast::Expression *>($1), static_cast<ast::Expression *>($3), line_num); }
  | expression '*' expression
    { $$ = new ast::BinaryIntExpression(ast::BinaryIntExpression::MUL, static_cast<ast::Expression *>($1), static_cast<ast::Expression *>($3), line_num); }
  | expression '<' expression
    { $$ = new ast::ComparisonExpression(ast::ComparisonExpression::LT, static_cast<ast::Expression *>($1), static_cast<ast::Expression *>($3), line_num); }
  | expression AND expression
    { $$ = new ast::BinaryBooleanExpression(ast::BinaryBooleanExpression::BOOLEAN_AND, static_cast<ast::Expression *>($1), static_cast<ast::Expression *>($3), line_num); }
  | expression '[' expression ']'
    { $$ = new ast::IntArraySubscriptExpression(static_cast<ast::Expression *>($1), static_cast<ast::Expression *>($3), line_num); }
  | expression '.' LENGTH
    { $$ = new ast::IntArrayLengthExpression(static_cast<ast::Expression *>($1), line_num); }
  | expression '.' IDENTIFIER '(' expression_list ')'
    { $$ = new ast::CallExpression(static_cast<ast::Expression *>($1), new ast::Identifier($3, line_num), $5, line_num); }
  | INT_LITERAL
    { $$ = new ast::IntLiteral($1, line_num); }
  | TRUE
    { $$ = new ast::BooleanLiteral(true, line_num); }
  | FALSE
    { $$ = new ast::BooleanLiteral(false, line_num); }
  | IDENTIFIER
    { $$ = new ast::IdentifierExpression($1, line_num); }
  | THIS
    { $$ = new ast::ThisExpression(line_num); }
  | NEW INT '[' expression ']'
    { $$ = new ast::NewIntArrayExpression(static_cast<ast::Expression *>($4), line_num); }
  | NEW IDENTIFIER '(' ')'
  // TODO: use IdentifierType here?
    { $$ = new ast::NewObjectExpression(new ast::Identifier($2, line_num), line_num); }
  | '!' expression
    { $$ = new ast::UnaryBooleanExpression(ast::UnaryBooleanExpression::BOOLEAN_NEG, static_cast<ast::Expression *>($2), line_num); }
  | '(' expression ')'
    { $$ = $2; }
  ;

%%

extern int line_num;

void yyerror(const char *str)
{
  fprintf(stderr, "error on line %d: %s\n", line_num, str);
}

int yywrap()
{
  return 1; // ?
}
