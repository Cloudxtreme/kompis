// vim: set filetype=yacc :

%{
#include "ast/ast.hpp"
using namespace kompis;
using namespace ast;

extern "C"
{
  void yyerror(const char *);
  int yywrap();
}

int yylex();
%}

%token BOOLEAN CLASS ELSE FALSE IDENTIFIER IF INT INTEGER_LITERAL MAIN NEW PRINT PUBLIC RETURN STATIC STRING THIS TRUE VOID WHILE
%left ','
%right '='
%left AND
%left '<'
%left '+' '-'
%left '*'
%right '!'
%left '.'

%union
{
  Node *node;
}

%type <node> program main_class class_declarations class_declaration variable_declarations variable_declaration method_declarations method_declaration parameter_list parameter_rests parameter_rest type statements statement expression_list expression_rests expression_rest expression

%%

program
  : main_class class_declarations
    { $$ = new ProgramDeclaration((MainClassDeclaration *)$1, NULL); } // TODO
  ;

main_class
  : CLASS IDENTIFIER '{' PUBLIC STATIC VOID MAIN '(' STRING '[' ']' IDENTIFIER ')' '{' statement '}' '}'
    { $$ = new MainClassDeclaration(NULL, (Statement *)$15); } // TODO
  ;

class_declarations
  :
    { $$ = NULL; }
  | class_declarations class_declaration
    { $$ = NULL; }
  ;

class_declaration
  : CLASS IDENTIFIER '{' variable_declarations method_declarations '}'
    { $$ = new ClassDeclaration(NULL, NULL, NULL); } // TODO
  ;

variable_declarations
  :
    { $$ = NULL; }
  | variable_declarations variable_declaration
    { $$ = NULL; }
  ;

variable_declaration
  : type IDENTIFIER ';'
    { $$ = new VariableDeclaration((Type *)$1, NULL); } // TODO
  ;

method_declarations
  :
    { $$ = NULL; }
  | method_declarations method_declaration
    { $$ = NULL; }
  ;

method_declaration
  : PUBLIC type IDENTIFIER '(' parameter_list ')' '{' variable_declarations statements RETURN expression ';' '}'
    { $$ = new MethodDeclaration((Type *)$2, NULL, NULL, NULL, NULL, (Expression *)$11); } // TODO
  ;

parameter_list
  :
    { $$ = NULL; }
  | type IDENTIFIER parameter_rests
    { $$ = NULL; }
  ;

parameter_rests
  :
    { $$ = NULL; }
  | parameter_rests parameter_rest
    { $$ = NULL; }
  ;

parameter_rest
  : ',' type IDENTIFIER
    { $$ = NULL; }
  ;

type
  : BOOLEAN
    { $$ = new BooleanType(); }
  | INT
    { $$ = new IntegerType(); }
  | IDENTIFIER
    { $$ = new IdentifierType(NULL); } // TODO
  ;

statements
  :
    { $$ = NULL; }
  | statement statements // right recursive, to fix a shift/reduce conflict in method bodies
    { $$ = NULL; }
  ;

statement
  : '{' statements '}'
    { $$ = $2; }
  | IF '(' expression ')' statement ELSE statement
    { $$ = new IfThenElseStatement((Expression *)$3, (Statement *)$5, (Statement *)$7); }
  | WHILE '(' expression ')' statement
    { $$ = new WhileDoStatement((Expression *)$3, (Statement *)$5); }
  | PRINT '(' expression ')' ';'
    { $$ = new PrintStatement((Expression *)$3); }
  | IDENTIFIER '=' expression ';'
    { $$ = new AssignmentStatement(NULL, (Expression *)$3); } // TODO
  ;

expression_list
  :
    { $$ = NULL; }
  | expression expression_rests
    { $$ = NULL; }
  ;

expression_rests
  :
    { $$ = NULL; }
  | expression_rest expression_rests
    { $$ = NULL; }
  ;

expression_rest
  : ',' type IDENTIFIER
    { $$ = NULL; }
  ;

expression
  : INTEGER_LITERAL
    { $$ = new IntegerLiteral(0); } // TODO
  ;

/*
expression
  : expression '+' expression
    { $$ = new AdditionExpression($1, $2); }
  | expression '-' expression
    { $$ = new SubtractionExpression($1, $2); }
  | expression '*' expression
    { $$ = new MultiplicationExpression($1, $2); }
  | expression '<' expression
    { $$ = new LessThanExpression($1, $2); }
  | expression AND expression
    { $$ = new ConjunctionExpression($1, $2); }
  | expression '.' IDENTIFIER '(' expression_list ')'
    { $$ = new CallExpression($1, NULL, $3); }
  | INTEGER_LITERAL
    { $$ = new IntegerLiteral(yylval); }
  | TRUE
    { $$ = new BooleanLiteral(true); }
  | FALSE
    { $$ = new BooleanLiteral(false); }
  | IDENTIFIER
    { $$ = new IdentifierExpression(NULL); } // TODO
  | THIS
    { $$ = new ThisExpression(); }
  | NEW IDENTIFIER '(' ')'
    { $$ = new NewObjectExpression(NULL); } // TODO
  | '!' expression
    { $$ = new NegationExpression($2); }
  | '(' expression ')'
    { $$ = $2; }
  ;
*/

%%

extern int line_num;

void yyerror(const char *str)
{
  fprintf(stderr, "error on line %d: %s\n", line_num, str);
}

int yywrap()
{
  return 1; // ?
}

int main(int argc, char *argv[])
{
  yyparse();
  return 0;
}
